[{"E:\\xampp\\htdocs\\weather-app-main\\src\\index.js":"1","E:\\xampp\\htdocs\\weather-app-main\\src\\reportWebVitals.js":"2","E:\\xampp\\htdocs\\weather-app-main\\src\\App.js":"3","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\index.js":"4","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\WeeklyWeather.js":"5","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\HourlyWeather.js":"6","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\CurrentWeatherData.js":"7","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\About.js":"8","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\Error.js":"9","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\NavbarPage.js":"10","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\Timer.js":"11","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\Home.js":"12","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\Search.js":"13"},{"size":527,"mtime":1629687706000,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1629687706000,"results":"16","hashOfConfig":"15"},{"size":122,"mtime":1629687706000,"results":"17","hashOfConfig":"15"},{"size":822,"mtime":1629687706000,"results":"18","hashOfConfig":"15"},{"size":6249,"mtime":1630344566665,"results":"19","hashOfConfig":"15"},{"size":4377,"mtime":1630349056832,"results":"20","hashOfConfig":"15"},{"size":5379,"mtime":1630433799631,"results":"21","hashOfConfig":"15"},{"size":2895,"mtime":1629687706000,"results":"22","hashOfConfig":"15"},{"size":743,"mtime":1629687706000,"results":"23","hashOfConfig":"15"},{"size":1512,"mtime":1630153349359,"results":"24","hashOfConfig":"15"},{"size":505,"mtime":1629687706000,"results":"25","hashOfConfig":"15"},{"size":622,"mtime":1629687706000,"results":"26","hashOfConfig":"15"},{"size":628,"mtime":1629687706000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1hi8ra",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"30"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"30"},"E:\\xampp\\htdocs\\weather-app-main\\src\\index.js",[],["63","64"],"E:\\xampp\\htdocs\\weather-app-main\\src\\reportWebVitals.js",[],"E:\\xampp\\htdocs\\weather-app-main\\src\\App.js",[],"E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\index.js",[],"E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\WeeklyWeather.js",["65","66","67"],"import React, {useState, useEffect} from 'react'\nimport {Card, Button, Spinner, Modal} from 'react-bootstrap'\nimport Timer from './Timer'\nimport weeklyCSS from './weekly.module.css'\n\nconst api = {\n  key: 'c3512f3ec8bd5a8b7c26d9756efd841c',\n  base: 'https://api.openweathermap.org/data/2.5/' \n}\nconst WeeklyWeather = () => {\n\n  const [weather, setWeather] = useState({});\n  const [query, setQuery] = useState('');\n  const [show, setShow] = useState(false);\n  const [showResults, setShowResults] = useState(false)\n  const [loading, setLoading] = useState(false)\n  const [error, setError] = useState(null);\n  // const [city, setCity] = useState({});\n  let [date,setDate] = useState(new Date());\n     \n  const search = evt => {\n    if(evt.key === 'Enter'){\n      setLoading(true)\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        fetch(`${api.base}onecall?lat=${result.coord.lat}&lon=${result.coord.lon}&appid=${api.key}`)\n        .then(res => res.json())\n        .then(resultDaily => {\n          console.log(resultDaily)\n          setWeather(resultDaily)\n          setShow(true)\n          setLoading(false)\n          // console.log(weather)\n        })\n      }).catch(err => {\n        setError(err.message);\n        setWeather({})\n        setLoading(false)\n      })        \n    }\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  \n    let day = days[d.getDay()]\n    let date = d.getDate()\n    let month = months[d.getMonth()]\n    let year = d.getFullYear()\n  \n    return `${day}, ${date}th ${month}, ${year}`\n  }\n\n  const getDayAndMonth = (weekDay) => {\n    const unixTime = weekDay;\n    const date = new Date(unixTime*1000);\n    \n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n    let day = days[date.getDay()]\n    let month = months[date.getMonth()]\n    let currentDate = date.getDate()\n    return `${day} ${currentDate}th ${month}`\n  }\n\n  const showInfo = (day) => {\n    if(!day.isExtended){\n      day.isExtended = true\n    }\n    else{\n      day.isExtended = false\n    }\n    setShowResults(!showResults)\n  }\n\n  function Error() {\n    return (\n      <>\n        <Modal show={error}>\n          <Modal.Header>\n            <Modal.Title>Unexpected Error</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Location does not exist</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={() => setError(null)} >\n              close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n  const WeatherCard = () => {\n    return <>\n     <Card className={weeklyCSS.weatherCardWeekly}>\n      <Card.Body>\n        <Card.Title className={weeklyCSS.weatherCardMain}>7 Days Weather</Card.Title>\n        <div className={weeklyCSS.lineClassMain}></div>\n          {(typeof weather.daily != 'undefined') ? (\n            <div>\n              {weather.daily.map(day => (     \n                <div>\n                  <div className={weeklyCSS.weatherCardDate}>{getDayAndMonth(day.dt)}</div>\n                  <div>\n                    {day.weather.map(info =>{\n                      return (\n                        <div>\n                          <img className={weeklyCSS.weatherIconWeekly} src={\"http://openweathermap.org/img/wn/\" + info.icon + \".png\"} alt=\"No Icon Available\"/>\n                          <p className={weeklyCSS.weatherCardDescription}>{info.description}</p>\n                        </div>\n                      )\n                    })}\n                  </div>   \n                  <div className={weeklyCSS.weatherCardTemperature}><p>Temperature: {Math.round(day.temp.day - 273.15)}°C</p></div>\n                  <div className={weeklyCSS.minMaxWeather}>\n                    <div><p>{Math.round(day.temp.max - 273.15)}°C</p></div>\n                    <div className={weeklyCSS.lineClassTwo}></div>                 \n                    <div><p>{Math.round(day.temp.min - 273.15)}°C</p></div>\n                  </div>\n                  <Button className={weeklyCSS.btn} onClick={() => showInfo(day)} variant=\"outline-light\">More Details</Button>{' '}\n                  <div className={weeklyCSS.lineClassOne}></div>\n    \n                  { day.isExtended ? <div className={weeklyCSS.weatherCardWeeklyMainDetails}>\n                    <div>\n                      <p>Feels Like: {Math.round(day.feels_like.day - 273.15)}°C</p>    \n                    </div>\n                    <div>\n                      <p>Humidity: {day.humidity}%</p> \n                    </div>                                         \n                    <div>\n                      <p>Pressure: {day.pressure}hPa</p>   \n                    </div>\n                    <div>\n                      <p>Wind Direction: {day.wind_deg}°</p>      \n                    </div>                      \n                    <div>\n                      <p>Wind Speed: {day.wind_speed}m/s</p>    \n                    </div>\n                    <div>\n                      <p>Wind Gust: {day.wind_gust}m/s</p>    \n                    </div>\n                  </div> : null }\n                </div> \n              ))}\n            </div>\n          ) : ('')}\n        </Card.Body>\n    </Card>    \n      </>\n  }\n  \n  return (\n    <>\n      <div className={weeklyCSS.inputContainer}>\n        <input type=\"text\" placeholder=\" Search city...\" onChange={e => setQuery(e.target.value)} value={query} onKeyPress={search}/>\n      </div>\n      <Timer/>   \n      <div className={weeklyCSS.dateBuilderWeekly}>\n        {dateBuilder(new Date())}\n      </div>\n      {loading ? <div className={weeklyCSS.spinnerContainer}><Spinner animation=\"border\" variant=\"dark\" className={weeklyCSS.spinner}/></div>  : null  }\n     <div>\n      {show && <WeatherCard />}\n     </div>\n     {error && <Error />}\n    </>\n  );\n}\n\nexport default WeeklyWeather;\n\n\n","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\HourlyWeather.js",["68","69"],"import React, {useState} from 'react'\nimport {Card, Spinner, Modal, Button} from 'react-bootstrap'\nimport Timer from './Timer'\nimport Search from './Search'\nimport hourlyCSS from './hourly.module.css'\n\nconst api = {\n  key: 'c3512f3ec8bd5a8b7c26d9756efd841c',\n  base: 'https://api.openweathermap.org/data/2.5/' \n}\n\nconst HourlyWeather = () => {\n  const [weather, setWeather] = useState({});\n  const [query, setQuery] = useState('');\n  const [hourly, setHourly] = useState([]);\n  const [error, setError] = useState(null);\n  const [show, setShow] = useState(false);\n  const [loading, setLoading] = useState(false);\n\n  const search = evt => {\n    if(evt.key === 'Enter'){\n      setLoading(true)\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => res.json())\n      .then(result => {\n        fetch(`${api.base}onecall?lat=${result.coord.lat}&lon=${result.coord.lon}&appid=${api.key}`)\n        .then(res => res.json())\n        .then(resultDaily => {\n          setWeather(resultDaily)\n          setShow(true)\n          setLoading(false)\n          console.log(resultDaily)\n          console.log(hourlyCSS)\n          resultDaily.hourly.length = 24\n          setHourlyFiltered(resultDaily.hourly, 3)\n        })\n      }).catch(err => {\n        setError(err.message);\n        setWeather({})\n        setLoading(false)\n      })     \n    }\n  }\n\n  const hourlyFiltered = (hourly, nth) => {\n    return hourly.filter((e, i) => i % nth === nth - 1);\n  }\n\n  const setHourlyFiltered = function(hourly, nth){\n    let filteredHourly = hourlyFiltered(hourly, nth)\n    setHourly(filteredHourly)\n  }\n\n  function Error() {\n    return (\n      <>\n        <Modal show={error}>\n          <Modal.Header>\n            <Modal.Title>Unexpected Error</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Location does not exist</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={() => setError(null)} >\n              close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  \n    let day = days[d.getDay()]\n    let date = d.getDate()\n    let month = months[d.getMonth()]\n    let year = d.getFullYear()\n  \n    return `${day}, ${date}th ${month}, ${year}`\n  }\n\n  const WeatherCard = () => {\n    return <>\n     <Card className={hourlyCSS.hourlyWeatherCard}>\n      <Card.Body>\n        <Card.Title className={hourlyCSS.hourlyWeatherCardMain}>Hourly Weather</Card.Title>\n        <div className={hourlyCSS.hourlyLineClassMain}></div>\n        <div className={hourlyCSS.hourlyNextThreeHours}>Weather every next 3 hours</div>\n          {(typeof hourly != 'undefined') ? (\n            <div>{hourly.map(hour => (\n              <div>\n                <div className={hourlyCSS.detailsMain}>\n                  <div className={hourlyCSS.details}>Temperature: {Math.round(hour.temp - 273.15)}°C</div>\n                  <div className={hourlyCSS.details}>Feels Like: {Math.round(hour.feels_like - 273.15)}°C</div>\n                </div>\n                <div className={hourlyCSS.weatherCardHourlyMainDetails}>\n                  <div>Pressure: {hour.pressure }hPa</div>\n                  <div>Humidity: {hour.humidity}%</div>\n                  <div>Visibility: {hour.visibility }m</div>\n                  <div>Wind Speed: {hour.wind_speed}m/s</div>\n                </div>\n                <div className={hourlyCSS.detailsLine}></div>\n              </div>\n            ))}</div>\n          ) : ('')}\n        </Card.Body>\n    </Card>    \n      </>\n  }\n  \n  return (\n    <>\n      <div className={hourlyCSS.inputContainer}>\n        <input type=\"text\" placeholder='Search...' onChange={e => setQuery(e.target.value)} value={query} onKeyPress={search}/>\n      </div>\n      <Timer/>\n      <div className={hourlyCSS.hourlyDateBuilder}>\n        {dateBuilder(new Date())}\n      </div>\n      {loading ? <div className={hourlyCSS.hourlySpinnerContainer}><Spinner animation=\"border\" variant=\"dark\" className={hourlyCSS.hourlySpinner} /></div> : null}\n      {show && <WeatherCard />}\n      {error && <Error />}\n    </>\n  );\n}\n\nexport default HourlyWeather;\n\n\n","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\CurrentWeatherData.js",["70","71","72"],"import React, {useState} from 'react'\nimport {Card, Spinner, Modal, Button} from 'react-bootstrap'\nimport {FaTemperatureHigh} from 'react-icons/fa'\nimport {WiHumidity} from 'react-icons/wi'\nimport {FiWind} from 'react-icons/fi'\nimport {MdVisibility} from 'react-icons/md'\nimport {GiWindsock} from 'react-icons/gi'\nimport {WiBarometer} from 'react-icons/wi'\nimport Home from './Home'\nimport indexCSS from './index.module.css'\nimport Timer from './Timer'\nimport Search from './Search'\nimport {useHistory} from \"react-router-dom\";\n\nconst api = {\n  key: 'c3512f3ec8bd5a8b7c26d9756efd841c',\n  base: 'https://api.openweathermap.org/data/2.5/' \n}\n\nconst CurrentWeatherData = () => {\n  \n  const history = useHistory();\n  const [weather, setWeather] = useState({})\n  const [error, setError] = useState(null)\n  const [show, setShow] = useState(false)\n  const [loading, setLoading] = useState(false)\n  let [date, setDate] = useState(new Date());\n\n  const search = (query) => {\n      setLoading(true)\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n      .then(res => {\n        if(!res.ok){\n          throw Error('Unexpected Error')\n        }\n        return res.json()\n      })\n      .then(result => { \n        setWeather(result)\n        setShow(true)\n        setLoading(false)\n      })\n      .catch(err => {\n        setError(true);\n        setWeather({})\n        setLoading(false)\n      })      \n  }\n \n  function Error() {\n    return (\n      <>\n        <Modal show={error}>\n          <Modal.Header>\n            <Modal.Title>Unexpected Error</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Location does not exist</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={() => setError(null)} >\n              close\n            </Button>\n          </Modal.Footer>\n        </Modal>\n      </>\n    );\n  }\n  \n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n  \n    let day = days[d.getDay()]\n    let date = d.getDate()\n    let month = months[d.getMonth()]\n    let year = d.getFullYear()\n  \n    return `${day}, ${date}th ${month}, ${year}`\n  }\n  const WeatherCard = () => {\n    return <>\n    <Card className={(typeof `${weather.main}` != 'undefined') ? ((`${weather.main.temp}` < 16) ? `${indexCSS.weatherCardTwo}` : `${indexCSS.weatherCard}`) : `${indexCSS.weatherCard}`}>              \n      <Card.Body>\n        <Card.Title></Card.Title>\n          {(typeof weather.main != 'undefined') ? (\n            <div className={indexCSS.weatherCardFont}>\n              <h4 className={indexCSS.weatherTownAndCountry}>{weather.name}, {weather.sys.country}</h4>\n              <h3 className={indexCSS.weatherMain}>{Math.round(weather.main.temp)}°C</h3>\n              <div className={indexCSS.minMaxTemperature}>\n                <p>{Math.round(weather.main.temp_max)}°C</p>\n                <p>{Math.round(weather.main.temp_min)}°C</p>\n                <div className={indexCSS.line}></div>\n              </div>\n              <p>{weather.weather.map(element => {\n                return (\n                  <div>\n                    <img className={indexCSS.weatherIcon} src={\"http://openweathermap.org/img/wn/\" + element.icon + \".png\"} alt=\"No Icon Available\"/>\n                    <p className={indexCSS.weatherDescription}>{element.description}</p>\n                  </div>\n                ) \n                })}\n              </p>\n              {show && <div className={indexCSS.detailsContainer}>\n                <div className={indexCSS.details}>\n                  <p>Details</p>\n                  <div className={indexCSS.lineTwo}></div>\n                </div>\n                <div className={indexCSS.detailsWeather}>\n                  <div>\n                    <FaTemperatureHigh />\n                    <p>Feels Like: {weather.main.feels_like}°C</p>\n                  </div>\n                  <div>\n                    <FiWind />\n                    <p>Wind Speed: {weather.wind.speed}m/s</p>\n                  </div>\n                  <div>\n                    <GiWindsock />\n                    <p>Wind Direction: {weather.wind.deg}°</p>\n                  </div>\n                  <div>\n                    <WiHumidity size=\"30px\"/>\n                    <p>Humidity: {weather.main.humidity}%</p>\n                  </div>\n                  <div>\n                    <WiBarometer size=\"30px\"/>\n                    <p>Pressure: {weather.main.pressure}hPa</p>\n                  </div>\n                  <div>\n                    <MdVisibility />\n                    <p>Visibility: {weather.visibility} m</p>\n                  </div>\n                </div>\n              </div>}\n            </div>\n            ) : ('')}\n        </Card.Body>\n    </Card>\n    </>\n  }\n\n  return (\n    <> \n      {error && <Error />}\n      <Search onSearch={search}/>\n      <Timer/>\n      <div className={indexCSS.dateBuilder}>\n        {dateBuilder(new Date())}\n      </div>\n      {loading ? <div className={indexCSS.spinnerContainer}><Spinner animation=\"border\" variant=\"dark\" className={indexCSS.spinner} /></div>  : null  }\n      {show && <WeatherCard />}\n      {show || <Home />}\n    </>\n  );\n}\n\n\n\nexport default CurrentWeatherData;\n\n\n","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\About.js",["73","74","75"],"import React from  'react';\nimport {IoLogoFacebook} from 'react-icons/io'\nimport {FiTwitter} from 'react-icons/fi'\nimport {ImYoutube2} from 'react-icons/im'\nimport {AiFillLinkedin} from 'react-icons/ai'\nimport {GrInstagram} from 'react-icons/gr'\nimport Image from './assets/openweather-icon.png'\nimport Image2 from './assets/google-play.png'\nimport Image3 from './assets/app-store.png'\nimport aboutCSS from './about.module.css'\n\nfunction ReturnSection() {\n  \n  return (\n      <footer className={aboutCSS.footerContainer}>\n        <div className={aboutCSS.footerDiv}>\n          <div className={aboutCSS.greyLineTwo}></div>\n          <b className={aboutCSS.weatherAppText}>Connect With Us</b>\n          <div id=\"sm\" className={aboutCSS.footerSocialMedia}>\n            <a href=\"https://www.facebook.com/\" className={aboutCSS.smFacebook}>\n              <IoLogoFacebook size=\"30px\" />\n            </a>\n            <a href=\"https://twitter.com/\" className={aboutCSS.smTwitter}>\n              <FiTwitter size=\"30px\" />\n            </a>\n            <a href=\"https://www.youtube.com/\" className={aboutCSS.smYoutube}> \n              <ImYoutube2 size=\"30px\" />\n            </a>\n            <a href=\"https://www.instagram.com/\" className={aboutCSS.smInstagram}>\n              <GrInstagram size=\"30px\" /> \n            </a>\n            <a href=\"https://www.linkedin.com/\" className={aboutCSS.smLinkedin}>\n              <AiFillLinkedin size=\"30px\" /> \n            </a>\n          </div>\n          <div className={aboutCSS.footerLinks}>\n            <a href=\"https://en.wikipedia.org/wiki/Privacy_policy\"><b>Privacy Policy</b></a>\n            <p className={aboutCSS.footerLinksOne}>|</p>\n            <a className={aboutCSS.footerLinksTwo} href=\"https://en.wikipedia.org/wiki/Terms_of_service\"><b>Terms Of Service</b></a>\n            <p className={aboutCSS.footerLinksOne}>|</p>\n            <a href=\"https://en.wikipedia.org/wiki/FAQ\"><b>FAQ</b></a>\n          </div>\n          <p className={aboutCSS.weatherAppTextTwo}>Thank you for using WeatherApp!</p>\n          <a href=\"https://openweathermap.org/\" className={aboutCSS.weatherAppTextThree}>Powered By OpenWeather</a>\n          <a href=\"https://openweathermap.org/\"><img src={Image} className={aboutCSS.weatherImage}  alt=\"No Image Available\"/></a>\n          <div className={aboutCSS.greyLine}></div>\n          <p className={aboutCSS.weatherAppTextFour}>© 2021 WeatherApp, Inc. \"WeatherApp\" and sun design are registered trademarks of WeatherApp, Inc.</p>\n          <div className={aboutCSS.appImages}>\n            <a href=\"https://play.google.com/store/apps\"><img src={Image2} className={aboutCSS.appImage} alt=\"No Image Available\"/></a>\n            <a href=\"https://play.google.com/store/apps\"><img src={Image3} className={aboutCSS.appImage} alt=\"No Image Available\"/></a>\n          </div>\n        </div>\n      </footer> \n  )\n}\n\nexport default ReturnSection;","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\Error.js",["76"],"import React from  'react';\nimport {Link} from 'react-router-dom'\nimport {Button} from 'react-bootstrap'\nimport errorCSS from './error.module.css'\nimport Image4 from './assets/404-not-found.png'\n\nconst Error = () => {\n\n  return (\n    <body id=\"bodyId\">\n      <div className={errorCSS.errorDiv} >\n        <img src={Image4} className={errorCSS.errorImage} alt=\"No Image Available\"/>  \n        <h1 className={errorCSS.title}>Whoops!</h1>\n        <p>The page you were looking for does not exist! Click on the button to return to the Home Page</p>\n        <Link to='/'>\n          <Button className={errorCSS.btn} variant=\"primary\">Go Back To Home</Button>{' '}\n        </Link>        \n      </div> \n    </body>\n        \n  )\n}\n\nexport default Error;","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\NavbarPage.js",["77"],"import React from  'react';\nimport {Link} from 'react-router-dom'\nimport { Navbar, Nav,  NavDropdown } from 'react-bootstrap'\nimport navbarCSS from './navbar.module.css'\nimport {AiOutlineCloud} from 'react-icons/ai'\n\nconst NavbarPage = () => {\n  return (\n    <>\n      <Navbar bg=\"light\" expand=\"lg\" fixed=\"top\" className={navbarCSS.mainNav}>\n        <Link to=\"/\"><img className={navbarCSS.icon} src=\"https://images-na.ssl-images-amazon.com/images/I/81%2BeUvsHXoL.png\" alt=\"No Logo Available\"/></Link>\n          <Navbar.Brand className={navbarCSS.weatherApp} href=\"/\">WeatherDude<AiOutlineCloud style={{color:'#6495ED'}}/></Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n        <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\" className={navbarCSS.navMain}>\n              <Nav.Link href=\"/\">Home</Nav.Link>\n                <NavDropdown title=\"More Weather Options\" id=\"basic-nav-dropdown\" className={navbarCSS.nav}>\n                <NavDropdown.Item href=\"/weekly\">7 Day Forecast</NavDropdown.Item>\n                <NavDropdown.Item href=\"/hourly\">Hourly Forecast</NavDropdown.Item>\n                <NavDropdown.Item href=\"https://www.wunderground.com/history\">Historical data for 5 previous days</NavDropdown.Item>\n                <NavDropdown.Divider/>\n                <NavDropdown.Item href=\"/about\">About</NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n        </Navbar.Collapse>\n    </Navbar> \n  </>\n  )  \n}\n\nexport default NavbarPage;","E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\Timer.js",[],["78","79"],"E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\Home.js",[],"E:\\xampp\\htdocs\\weather-app-main\\src\\setup\\Search.js",["80","81"],"import React, {useState} from 'react'\nimport indexCSS from './index.module.css'\n\nconst api = {\n  key: 'c3512f3ec8bd5a8b7c26d9756efd841c',\n  base: 'https://api.openweathermap.org/data/2.5/' \n}\n\nconst Search = (props) => {\n  const [query, setQuery] = useState('')  \n\n  const passSearchTerm = (evt) => {\n    if(evt.key == \"Enter\") {\n      props.onSearch(query)\n    }\n  } \n\n  return (\n    <>\n      <div className={indexCSS.inputContainer}>\n        <input type=\"text\" placeholder=\" Search city...\" value={query} onChange={e => setQuery(e.target.value)} onKeyPress={passSearchTerm}/>\n      </div>\n    </>\n  )\n}\n\nexport default Search\n",{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":1,"column":26,"nodeType":"88","messageId":"89","endLine":1,"endColumn":35},{"ruleId":"86","severity":1,"message":"90","line":19,"column":8,"nodeType":"88","messageId":"89","endLine":19,"endColumn":12},{"ruleId":"86","severity":1,"message":"91","line":19,"column":13,"nodeType":"88","messageId":"89","endLine":19,"endColumn":20},{"ruleId":"86","severity":1,"message":"92","line":4,"column":8,"nodeType":"88","messageId":"89","endLine":4,"endColumn":14},{"ruleId":"86","severity":1,"message":"93","line":13,"column":10,"nodeType":"88","messageId":"89","endLine":13,"endColumn":17},{"ruleId":"86","severity":1,"message":"94","line":22,"column":9,"nodeType":"88","messageId":"89","endLine":22,"endColumn":16},{"ruleId":"86","severity":1,"message":"90","line":27,"column":8,"nodeType":"88","messageId":"89","endLine":27,"endColumn":12},{"ruleId":"86","severity":1,"message":"91","line":27,"column":14,"nodeType":"88","messageId":"89","endLine":27,"endColumn":21},{"ruleId":"95","severity":1,"message":"96","line":45,"column":49,"nodeType":"97","endLine":45,"endColumn":127},{"ruleId":"95","severity":1,"message":"96","line":49,"column":58,"nodeType":"97","endLine":49,"endColumn":132},{"ruleId":"95","severity":1,"message":"96","line":50,"column":58,"nodeType":"97","endLine":50,"endColumn":132},{"ruleId":"95","severity":1,"message":"96","line":12,"column":9,"nodeType":"97","endLine":12,"endColumn":85},{"ruleId":"98","severity":1,"message":"99","line":15,"column":38,"nodeType":"100","endLine":15,"endColumn":67},{"ruleId":"82","replacedBy":"101"},{"ruleId":"84","replacedBy":"102"},{"ruleId":"86","severity":1,"message":"103","line":4,"column":7,"nodeType":"88","messageId":"89","endLine":4,"endColumn":10},{"ruleId":"104","severity":1,"message":"105","line":13,"column":16,"nodeType":"106","messageId":"107","endLine":13,"endColumn":18},"no-native-reassign",["108"],"no-negated-in-lhs",["109"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'date' is assigned a value but never used.","'setDate' is assigned a value but never used.","'Search' is defined but never used.","'weather' is assigned a value but never used.","'history' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["108"],["109"],"'api' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]